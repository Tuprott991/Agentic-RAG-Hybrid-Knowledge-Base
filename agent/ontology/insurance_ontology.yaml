# Graphiti Ontology: Insurance Product Domain
# Purpose: Model insurance documents (policies, riders, benefits, exclusions, premiums, claims) and their relationships.
# Notes:
# - Keep node/edge/property names short and semantic.
# - Favor many specific relations over generic ones for better retrieval.
# - Designed to be used as an include file for Graphiti schemas.

version: 1

# Entity (node) types in the insurance domain
entities:
  Policy:
    description: An insurance policy or contract issued to a policyholder.
    keys: [policy_number]
    properties:
      policy_number: {type: string, required: true}
      product_name: {type: string}
      policy_type: {type: enum, values: [TermLife, WholeLife, UniversalLife, ULIP, Health, CriticalIllness, Accident, RiderOnly, Other]}
      effective_date: {type: date}
      issue_date: {type: date}
      expiry_date: {type: date}
      currency: {type: string, default: "USD"}
      status: {type: enum, values: [Proposed, InForce, Lapsed, Surrendered, Cancelled, Maturity, ClaimSettled]}
      governing_law: {type: string}
      language: {type: string}
  Policyholder:
    description: An individual or organization owning the policy.
    keys: [id]
    properties:
      id: {type: string, required: true}
      name: {type: string}
      type: {type: enum, values: [Individual, Organization]}
      date_of_birth: {type: date}
      nationality: {type: string}
  InsuredPerson:
    description: The person whose life/health is insured (may be the policyholder).
    keys: [id]
    properties:
      id: {type: string, required: true}
      name: {type: string}
      date_of_birth: {type: date}
      gender: {type: enum, values: [Male, Female, Other, Unspecified]}
      smoker_status: {type: enum, values: [Smoker, NonSmoker, Unknown]}
  Beneficiary:
    description: Person or entity entitled to receive benefit payouts.
    keys: [id]
    properties:
      id: {type: string, required: true}
      name: {type: string}
      relation_to_insured: {type: string}
      share_percent: {type: number}
      contingent: {type: boolean}
  Premium:
    description: Premium details for a policy or rider.
    keys: [id]
    properties:
      id: {type: string, required: true}
      amount: {type: number}
      frequency: {type: enum, values: [Single, Monthly, Quarterly, SemiAnnual, Annual, Adhoc]}
      currency: {type: string, default: "USD"}
      mode: {type: enum, values: [Regular, TopUp]}
      due_date: {type: date}
  Benefit:
    description: A benefit offered by a policy or rider (sum assured, hospitalization, waiver, etc.).
    keys: [id]
    properties:
      id: {type: string, required: true}
      name: {type: string}
      category: {type: enum, values: [Death, TPD, CI, Hospitalization, Surgical, Accident, Waiver, Maturity, Survival, CashBack, Income, Other]}
      sum_assured: {type: number}
      unit: {type: enum, values: [Currency, Percentage, Days, Times, Units]}
      waiting_period_days: {type: number}
      deductible: {type: number}
      sublimit: {type: number}
      notes: {type: string}
  Rider:
    description: An optional add-on to a base policy, providing additional benefits/terms.
    keys: [code]
    properties:
      code: {type: string, required: true}
      name: {type: string}
      description: {type: string}
      issue_age_min: {type: number}
      issue_age_max: {type: number}
      expiry_age: {type: number}
  Exclusion:
    description: A stated exclusion/limitation for benefits or coverage.
    keys: [id]
    properties:
      id: {type: string, required: true}
      description: {type: string}
      category: {type: enum, values: [PreExisting, WaitingPeriod, War, Suicide, SelfInflicted, HazardousSports, AlcoholDrugs, Pregnancy, Covid19, General, Other]}
      duration_days: {type: number}
  Condition:
    description: Eligibility or contractual conditions (e.g., underwriting, disclosure, reinstatement, loans).
    keys: [id]
    properties:
      id: {type: string, required: true}
      name: {type: string}
      type: {type: enum, values: [Eligibility, Underwriting, Disclosure, Reinstatement, Loan, Surrender, Grace, FreeLook, Tax, Other]}
      text: {type: string}
  Claim:
    description: A claim event/payout request under the policy.
    keys: [claim_number]
    properties:
      claim_number: {type: string, required: true}
      type: {type: enum, values: [Death, TPD, CI, Hospitalization, Surgical, Accident, Maturity, Surrender, Waiver, Other]}
      event_date: {type: date}
      status: {type: enum, values: [Filed, UnderReview, Approved, Rejected, Paid, Closed]}
      amount_paid: {type: number}
      currency: {type: string, default: "USD"}
  Document:
    description: A source document (policy booklet, brochure, T&C, rider spec, annex).
    keys: [doc_id]
    properties:
      doc_id: {type: string, required: true}
      title: {type: string}
      lang: {type: string}
      country: {type: string}
      version: {type: string}
      effective_date: {type: date}
      source_path: {type: string}
  Term:
    description: A defined term or glossary entry used in documents.
    keys: [name]
    properties:
      name: {type: string, required: true}
      definition: {type: string}
      alias: {type: array, items: string}
  Table:
    description: A tabular artifact from documents (e.g., premium rate table, benefit schedule).
    keys: [id]
    properties:
      id: {type: string, required: true}
      title: {type: string}
      kind: {type: enum, values: [PremiumRate, BenefitSchedule, WaitingPeriod, Deductible, SubLimit, Fees, Other]}
      json: {type: string}

# Relationships (edges) between nodes
relations:
  POLICY_OF:
    description: Relates a Policy to its Policyholder.
    from: Policy
    to: Policyholder
    properties:
      role: {type: string, default: "Owner"}
  INSURES:
    description: Relates a Policy to an InsuredPerson.
    from: Policy
    to: InsuredPerson
  BENEFIT_OF:
    description: Benefit belongs to a Policy or Rider.
    from: Benefit
    to: [Policy, Rider]
    properties:
      base: {type: boolean, default: true}
  PREMIUM_FOR:
    description: Premium is collected for a Policy or Rider.
    from: Premium
    to: [Policy, Rider]
  HAS_RIDER:
    description: Policy has Rider attached.
    from: Policy
    to: Rider
  EXCLUDES:
    description: Exclusion applies to a Benefit, Rider, or Policy.
    from: Exclusion
    to: [Benefit, Rider, Policy]
  CONDITION_OF:
    description: Condition applies to Policy or Rider.
    from: Condition
    to: [Policy, Rider]
  CLAIM_UNDER:
    description: Claim is filed under a Policy.
    from: Claim
    to: Policy
  CLAIM_FOR:
    description: Claim targets a Benefit.
    from: Claim
    to: Benefit
  DERIVED_FROM:
    description: Node was extracted/derived from a Document.
    from: [Policy, Rider, Benefit, Exclusion, Condition, Premium, Term, Table]
    to: Document
    properties:
      page: {type: number}
      chunk_index: {type: number}
      source: {type: string}
  DEFINES:
    description: Document defines a Term.
    from: Document
    to: Term
  REFERENCES:
    description: Document references another Document.
    from: Document
    to: Document

# Index and search hints
indexes:
  - entity: Policy
    properties: [policy_number]
  - entity: Rider
    properties: [code]
  - entity: Claim
    properties: [claim_number]
  - entity: Document
    properties: [doc_id]

# Ingestion mapping suggestions (non-enforced helpers for your pipeline)
ingestion_hints:
  map:
    chunk.metadata.document_title -> Document.title
    chunk.metadata.source -> Document.source_path
    chunk.metadata.chunk_index -> relations.DERIVED_FROM.properties.chunk_index
  derive:
    - if text contains "waiting period" then create Exclusion.category = WaitingPeriod
    - if text contains "grace period" then create Condition.type = Grace
    - if text contains "free-look" or "cooling-off" then Condition.type = FreeLook
    - capture sums like "$10,000" as Benefit.sum_assured with unit=Currency
    - capture percents like "80%" as Benefit.unit=Percentage

# Validation rules (lightweight, optional)
validation:
  - rule: Beneficiary share must total <= 100 per Policy
    query: |
      MATCH (p:Policy)-[:POLICY_OF]->(:Policyholder)
      OPTIONAL MATCH (p)<-[:BENEFICIARY_OF]-(b:Beneficiary)
      WITH p, sum(coalesce(b.share_percent,0)) as total
      WHERE total > 100
      RETURN p.policy_number as policy, total
  - rule: Rider expiry_age should be >= issue_age_max
    check: entity == Rider and properties.expiry_age >= properties.issue_age_max
